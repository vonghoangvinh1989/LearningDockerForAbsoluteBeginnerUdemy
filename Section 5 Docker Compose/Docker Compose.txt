1) Docker run --links to like containers together
    For example: the voting-app service depends on the redis server to run
        docker run -d --name=redis redis
        docker run -d --name=db postgres
        docker run -d --name=vote -p 5000:80 --link redis:redis voting-app
            Note: the voting-app links to redis:redis container to run
                the 'vote' container will add in file /etc/hosts a line with the ip of internal of redis container
                    172.17.0.2 redis 89cd8eb563da
        docker run -d --name=result -p 5001:80 --link db:db result-app
            Note: the result-app links to db:db container to run and connect to database 
        docker run -d --name=worker --link db:db --link redis:redis worker

    Note: using '--link' like this was deprecated because of having bettet ways of achieving with docker swarms

2) Docker compose file from above with docker-compose.yml content
    redis:
        image: redis 
    db:
        image: postgres: 9.4
    vote:
        image: voting-app
        ports: 
            - 5000: 80
        links:
            - redis
    result:
        image: result-app
        ports: 
            - 5001: 80
        links:
            - db
    worker:
        image: worker
        links:
            - redis
            - db

    After creating the file compose, we can use command 'docker-compose up' to bring up the entire application stack
    Note: in case we do not have the available image like redis, we have to build the container from our machine, for that reason,
we can change the line 'image: voting-app' to the current folder in our applications
        For example:
            build: ./vote --> in folder ./vote already have 'Dockerfile' with content help it up and running, 
                replace for 'image: result-app'
            build: ./result --> replace for 'image: result-app'
            build: ./worker --> replace for 'image: worker'

3) Docker compose with versions
    For example: in version 2 with more advantages, it will be put under 'services' and we have to specify the 'version' of docker compose file in the top
    [Version 2 Sample]

        version: 2
        services:
            redis:
                image: redis 
            db:
                image: postgres: 9.4
            vote:
                image: voting-app
                ports: 
                    - 5000: 80
                depends_on:
                    - redis

    [Version 3 Sample]

        version: 3
        services:
            redis:
                image: redis 
            db:
                image: postgres: 9.4
            vote:
                image: voting-app
                ports: 
                    - 5000: 80
                depends_on:
                    - redis
        

    Note:
        version 1: attaches all the containers to the default bridge network
        version 2: 
            + automatically creates a dedicated bridge network for this application
         and then attaches all containers to that new network
            + all containers are able to communicate to each other using each other's service name, so we do not need to use
        'link' in version 2
            + we can specify 'depends_on' in that container which indicate others containers must start first before that container run
        
        version 3: support for docker swarm

4) Create network in docker compose file with property 'networks'
    version: 2
        services:
            redis:
                image: redis
                networks:
                    - back-end
            db:
                image: postgres: 9.4
                networks:
                    - back-end
            vote:
                image: voting-app
                networks:
                    - front-end 
                    - back-end
            
            result:
                image: result
                networks:
                    - front-end 
                    - back-end

        networks:
            front-end:
            back-end: 






















